% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/check_overlap.R
\name{check_overlap}
\alias{check_overlap}
\title{Identifies Overlapping Administrative Units}
\usage{
check_overlap(df_key = key_jointly)
}
\arguments{
\item{df_key}{A data.frame: Only the joint data.frame from this package can be processed.}
}
\value{
A 'list' object, with four 2 elements \code{candidates}, \code{details}
\itemize{
\item \code{candidates} - a vector with the low-level cluster id that overlap
\item \code{details} - a data frame with a detailed overview
\itemize{
\item \code{Gcluster_id} - low-level cluster id that overlaps
\item \code{Ccluster_id_1} - First top-level cluster assigned to
\item \code{Ccluster_id_2} - Second top-level cluster assigned to
\item \code{Cname_1} - name of First top-level cluster
\item \code{Cname_2} - name of Second top-level cluster
}
}
}
\description{
Identifies and reports which (if any) lower-level administrative units overlap the boundaries
of top-level administrative units.

There identification and adjustment is crucial if the user is interested in top-level fixed effects.
Otherwise a BSU cluster could be assigned to 2 municipalities simoultaniously.

The function takes any jointly estimated key from \code{\link[=EtE_changes]{EtE_changes()}} and returns a list object.
}
\examples{
df_key_join <- NGeoTrack::df_key_join
expl <- check_overlap(df_key = df_key_join)

expl$candidates
# [1] 100124 100125 100016 100373

expl$details
# Gcluster_id Ccluster_id_1 Ccluster_id_2 Cname_1     Cname_2
#    <int>         <int>         <int> <chr>       <chr>
# 100124           528           529  Østre Toten   Vestre Toten
# 100125           528           529  Østre Toten   Vestre Toten
# 100016        500023          1911  Sortland      Kvæfjord
# 100373           704        500016  Tønsberg      Sandefjord
}
